generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * ===== Enums =====
 */
enum RoomType {
    BOARDING // kos/kontrakan
    ARISAN
    COMMUNITY
    SPORTS
    FAMILY
    CUSTOM
}

enum MemberRole {
    ADMIN
    MEMBER
}

enum MemberStatus {
    ACTIVE
    INACTIVE
}

enum DueFrequency {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
    CUSTOM
}

enum InvoiceStatus {
    DRAFT
    PENDING
    PAID
    OVERDUE
}

enum PaymentMethod {
    CASH
    TRANSFER
    QRIS
    DEBIT
    CREDIT
    OTHER
}

enum DebtStatus {
    PENDING
    PAID
    OVERDUE
}

enum NotificationType {
    PAYMENT_DUE
    PAYMENT_OVERDUE
    NEW_MEMBER
    INVOICE_SENT
    REMINDER_SENT
}

enum NotificationPriority {
    LOW
    NORMAL
    HIGH
}

/**
 * ===== Core Models =====
 */
model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    name      String?
    password  String
    avatarUrl String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    rooms            Room[]            @relation("UserRooms") // created rooms
    memberships      RoomMember[]
    invoices         Invoice[]         @relation("InvoiceMember")
    payments         Payment[]         @relation("PaymentCreatedBy")
    debtsAsCreditor  Debt[]            @relation("DebtCreditor")
    debtsAsDebtor    Debt[]            @relation("DebtDebtor")
    notifications    Notification[]
    reminderSettings ReminderSetting[]
    Invite           Invite[]
}

model Room {
    id          Int      @id @default(autoincrement())
    name        String
    type        RoomType @default(CUSTOM)
    description String?
    inviteCode  String   @unique
    createdAt   DateTime @default(now())
    createdById Int
    updatedAt   DateTime @updatedAt
    currency    String   @default("IDR")

    // Relations
    createdBy       User              @relation("UserRooms", fields: [createdById], references: [id], onDelete: Cascade)
    members         RoomMember[]
    dues            Due[]
    invoices        Invoice[]
    debts           Debt[]
    notifications   Notification[]
    ReminderSetting ReminderSetting[]
    Invite          Invite[]

    @@index([createdById])
}

model RoomMember {
    id       Int          @id @default(autoincrement())
    roomId   Int
    userId   Int
    role     MemberRole   @default(MEMBER)
    status   MemberStatus @default(ACTIVE)
    joinedAt DateTime     @default(now())

    room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([roomId, userId])
    @@index([userId])
}

model Due {
    id          Int           @id @default(autoincrement())
    roomId      Int
    name        String
    description String?
    amount      Int // in rupiah
    isRecurring Boolean       @default(false)
    frequency   DueFrequency? // if recurring
    interval    Int? // e.g. every 1 month
    startDate   DateTime?
    nextDueDate DateTime?
    isActive    Boolean       @default(true)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    room     Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    invoices Invoice[]

    @@index([roomId])
    @@index([isActive])
}

model Invoice {
    id            String         @id @default(cuid()) // stable string IDs (UI shows string)
    code          String         @unique // e.g. INV-2025-0001
    roomId        Int
    memberId      Int // userId of member
    dueId         Int?
    description   String?
    amount        Int
    status        InvoiceStatus  @default(DRAFT)
    dueDate       DateTime
    sentAt        DateTime?
    paidDate      DateTime?
    paymentMethod PaymentMethod?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    room     Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    member   User      @relation("InvoiceMember", fields: [memberId], references: [id], onDelete: Cascade)
    due      Due?      @relation(fields: [dueId], references: [id])
    payments Payment[]

    @@index([roomId, status])
    @@index([memberId])
    @@index([dueDate])
}

model Payment {
    id          Int           @id @default(autoincrement())
    invoiceId   String
    amount      Int
    method      PaymentMethod
    paidAt      DateTime      @default(now())
    note        String?
    createdById Int

    invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    createdBy User    @relation("PaymentCreatedBy", fields: [createdById], references: [id])

    @@index([invoiceId])
    @@index([createdById])
}

model Debt {
    id          Int        @id @default(autoincrement())
    roomId      Int
    creditorId  Int // who should receive money
    debtorId    Int // who owes money
    amount      Int
    description String?
    dueDate     DateTime?
    status      DebtStatus @default(PENDING)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    room     Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
    creditor User @relation("DebtCreditor", fields: [creditorId], references: [id])
    debtor   User @relation("DebtDebtor", fields: [debtorId], references: [id])

    @@index([roomId])
    @@index([creditorId])
    @@index([debtorId])
    @@index([status])
}

model Notification {
    id        Int                  @id @default(autoincrement())
    userId    Int // receiver
    roomId    Int?
    type      NotificationType
    priority  NotificationPriority @default(NORMAL)
    title     String
    message   String
    amount    Int?
    isRead    Boolean              @default(false)
    createdAt DateTime             @default(now())

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    room Room? @relation(fields: [roomId], references: [id], onDelete: SetNull)

    @@index([userId, isRead])
    @@index([roomId])
    @@index([type])
}

model ReminderSetting {
    id                 Int      @id @default(autoincrement())
    userId             Int
    roomId             Int?
    paymentReminders   Boolean  @default(true)
    overdueAlerts      Boolean  @default(true)
    memberActivity     Boolean  @default(true)
    emailNotifications Boolean  @default(true)
    pushNotifications  Boolean  @default(false)
    updatedAt          DateTime @updatedAt

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    room Room? @relation(fields: [roomId], references: [id], onDelete: SetNull)

    @@unique([userId, roomId])
    @@index([roomId])
}

model Invite {
    id          Int       @id @default(autoincrement())
    roomId      Int
    code        String    @unique
    expiresAt   DateTime?
    createdById Int
    createdAt   DateTime  @default(now())

    room      Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
    createdBy User @relation(fields: [createdById], references: [id])

    @@index([roomId])
    @@index([createdById])
}
